
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.HayfeverEntryScalarFieldEnum = {
  id: 'id',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sneezing: 'sneezing',
  itchyEyes: 'itchyEyes',
  congestion: 'congestion',
  headache: 'headache',
  medications: 'medications',
  medicationEffectiveness: 'medicationEffectiveness',
  outdoorTime: 'outdoorTime',
  activities: 'activities',
  notes: 'notes',
  locationLat: 'locationLat',
  locationLng: 'locationLng',
  locationAddress: 'locationAddress',
  pollenCount: 'pollenCount',
  pollenTypes: 'pollenTypes',
  temperature: 'temperature',
  humidity: 'humidity',
  windSpeed: 'windSpeed'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  HayfeverEntry: 'HayfeverEntry'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/aidangreenwood-carr/Projects/hayfever-tracker/lib/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "/Users/aidangreenwood-carr/Projects/hayfever-tracker/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.7.0",
  "engineVersion": "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  output          = \"../lib/generated/prisma\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel HayfeverEntry {\n  id        String   @id @default(uuid())\n  date      DateTime\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Symptoms (0-4 scale: None, Mild, Moderate, Severe, Very Severe)\n  sneezing   Float\n  itchyEyes  Float\n  congestion Float\n  headache   Float\n\n  // Medications\n  medications             String // Stored as JSON string of medication names\n  medicationEffectiveness String // not_effective, somewhat_effective, very_effective\n\n  // Activities\n  outdoorTime Float? // Hours spent outdoors\n  activities  String // Stored as JSON string of activity names\n  notes       String?\n\n  // Location data\n  locationLat     Float?\n  locationLng     Float?\n  locationAddress String?\n\n  // Weather/Pollen data (can be populated from external API)\n  pollenCount Float?\n  pollenTypes String? // Stored as JSON string of pollen types\n  temperature Float?\n  humidity    Float?\n  windSpeed   Float?\n}\n",
  "inlineSchemaHash": "5271d08432743891cdda0475a2b596fce1cbad4511d2e760b4d55e55d3f0f8ad",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"HayfeverEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sneezing\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"itchyEyes\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"congestion\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"headache\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"medications\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"medicationEffectiveness\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"outdoorTime\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"activities\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locationLat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"locationLng\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"locationAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pollenCount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"pollenTypes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"temperature\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"humidity\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"windSpeed\",\"kind\":\"scalar\",\"type\":\"Float\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

